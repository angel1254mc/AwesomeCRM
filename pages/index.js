import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css';
import Navbar from '../components/Navbar.js';
import tStyles from '../styles/Text.module.css'
export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.main_container}>
        <Navbar></Navbar>
        <main className={styles.main_expand}>
          <div className={styles.main_section_outer}>
          <section className={styles.main_section}>
            <h1 className={tStyles.page_lead}>Home Page</h1>
            <div className={tStyles.page_sub}>Hello! This is a mock version of the ET Automated CRM and Pipeline Platform</div>
            <hr></hr>
            <div className={tStyles.page_text}>
              This is a surface-level and poorly bootstrapped non-final prototype of the UI that
              we are planning on designing for the ET CRM. I am building it on NextJS, using styled components to better organize
              CSS Stylings, and NextJS's router for pagination between things like Pipelines, Contracts, etc. 
            </div>
            <hr></hr>
            <div className={tStyles.page_sub}>
              How is this built?
            </div>
            <hr></hr>
            <div className={tStyles.page_text}>
              At its core, this prototype is built on two parts- <br></br> - A frontend using the <b>React Library</b>, with routing
              and server-side rendering handled by NextJS 12 (or 13 or something I can't remember). <br></br>
              - A backend built on Node.js with an Express-based REST API for populating the page with data (pipeline page w/ contracts, contract page w/ contract info, etc). <br></br>
              <br></br>
              I chose this because: <br></br>
              - I'm way more comfortable w/ React and Next <br></br>
              - I am biased and stupid <br></br>
              - I hate using embedded javascript for dynamic pages
            </div>
            <hr></hr>
            <div className={tStyles.page_sub}>
              Is This Architecture Final?
            </div>
            <hr></hr>
            <div className={tStyles.page_text}>
              Nope, it ultimately comes down to what the team is most comfortable with :). 
              We have yet to decide exactly which framework we want to use to build the app. 
              Some of the options we are looking at include:
              <h3>For the frontend</h3>
              <ul>
                <li> React </li>
                <li> Vanilla HTML, CSS, JS or EJS</li>
                <li> Svelte, Angular, and Vue</li>
              </ul>
              <h3>For the backend</h3>
              <ul>
                <li> Node.js - <b>JavaScript</b> </li>
                <li> Django - <b>Python</b> </li>
                <li> .NET - <b>C#</b></li>
              </ul>
            </div>
            <hr></hr>
            <div className={tStyles.page_sub}>
              Angel Try To Write Documentation Challenge (Impossible Edition)
            </div>
            <hr></hr>
            <div className={tStyles.page_text}>
              A better description of the architecture choices, the code structure for the React Components, Server-side rendering, and the Node server can be found from within the following Notion Link :)
            </div>
            
          </section>
          </div>
        </main>
      </div>
    </div>
  )
}

